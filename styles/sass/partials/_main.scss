@use './variables' as *;

// INDEX.HTML Starts Here
.section1 {
    height: 50vh;

    h2 {
        padding: 1rem 0;
    }
    p {
        padding-top: 0;
    }
    .flex1 {
        display: flex;
        align-items: center;
    }
    .textResize2 {
        max-width: 400px;
        padding: 2rem 5rem 2rem 0;
        p {
            margin-bottom: 0.5rem;
        }
        button {
            margin-top: 1.5rem;
        }
    }
    .box {
        display: block;
        background-color: #629b4b;
        color: $white;
        border-radius: 2rem;
        padding: 5rem 3rem 5rem 2rem;
    }
}

.section2, .section3 {
    .spaceResize {
        padding: 0 27.5%;
    }

    .centeredText {
        text-align: center;
        padding: 1rem 0;
    }
    
    .centeredText button {
        margin-top: 0rem;
        margin-bottom: 1rem;
    }
    p.centeredText {
        padding: 0 0 2rem 0;
    }
}

.section2 {
    height: 125vh;

    .centeredText {
        text-align: center;
        padding: 1rem 0;
    }
    
    .centeredText button {
        margin-top: 0rem;
        margin-bottom: 1rem;
    }
}

// I want to nest the rest of this section into section2, but can't since this will break the CSS grid for whatever reason.
// Instead of using 1 flex and 2 rows, I decided to make 2 separate flexes for a change of pace.
.flex2, .flex3 {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    justify-content: space-between;
    margin: 2rem 0;

    p {
        max-width: 175px;
    }
    img {
        max-width: 175px;
        padding-bottom: 1rem;
    }
    h4, p {
        padding-bottom: 1rem;
        padding-left: 1rem;
    }
    button {
        margin-left: 1rem;
        text-transform: capitalize;
    }
    div {
        border: 2px solid #f8f8f8;
    }
    .price {
        color: $green;
        font-weight: bold;
    }
}

.flex3 {
    margin-bottom: 2rem;
}

.flex4 {
    text-align: center;

    img {
        max-width: 248.5px;
    }
}

.flex5 {
    text-align: center;

    img {
        max-width: 375px;
    }
}

.flex6 {
    text-align: center;

    img {
        max-width: 248.5px;
    }
}

.section3 {
    background-image: url(../assets/grass.jpg);
    position: relative;
    background-size: cover;
    background-position: center;
    height: 110vh;
    .centeredText {
        text-align: center;
        padding: 1rem 0;
    }
    button {
        text-transform: capitalize;
        margin: 0 0.5rem;
    }
}

.section4 {
    background-color: $green;
    height: 75vh;
    // Just realised through typing trial and error that you can write "p.centeredText" instead of "centeredText p" to style things. This is such a massive revelation, and made my workload easier from this point forward.
    p.centeredText, h3.centeredText {
        text-align: center;
        color: $white;
    }
    p.centeredText {
        margin: 0 20% 5% 20%;
        text-align: center;
        color: $white;
    }
    h3.centeredText {
        padding: 4rem 0 1rem 0;
    }
    button {
        text-transform: capitalize;
    }
    img {
        min-width: 205px;
        // Didn't spot this on the img and .box until last minute. Such a small border radius on the markup design...
        border-radius: 3px;
    }
    .flex7 {
        display: flex;
        gap: 3%;
        justify-content: space-around;
        padding: 0 2rem;
        h4 {
            padding-top: 1rem;
        }
        p {
            line-height: 1.5;
            padding: 1rem 0;
        }
        img {
            display: block;
            margin-left: auto;
            margin-right: auto;
            width: 50%;
        }
    }
    
    .box {
        background-color: $white;
        padding: 1rem;
        border-radius: 3px;
    }
}



// CONTACT.HTML Starts Here

.contactHeroImage {
    background-image: url(../assets/contact.jpg);
}

.section5 {

    // This is so my li styling doesn't occur on my index.html
    li:hover, li:focus {
        transition: none;
        transform: none;
    }
    .flex12 {
        display: flex;
        gap: 2rem;
    }
    .box2 {
        border-left: 6px solid $green;
    }
    .formStyle {
        max-width: 450px;
        background: #fafafa;
        // If I make the padding 20px larger at the bottom and the min-height 50px, it will both make the text box spacing bigger, and have the boxes line up at the bottom. If I make the padding 30px all the way around, the right box will be larger at the bottom, therefore 100% matching the markup design (which makes the design look unsymmetrical). By doing the former (i.e adding my own iteration), I have both fixed and improved on the markup's design
        padding: 30px 30px 50px 30px;
        margin: 50px auto;
        // Glow effect!
        box-shadow: 1px 1px 12.5px rgba(0, 0, 0, 0.35);
        // The original design has no border radius on all 4 boxes, so I purposely added them in to make the design look more professional
        border-radius: 5px;
        ul {
            padding: 0;
            margin: 0;
            list-style: none;
            .centeredButton {
                text-align: center;
                margin: 2rem 0 0 0;
            }
            li {
                display: block;
                margin-bottom: 10px;
                min-height: 50px;
                .field-style {
                    box-sizing: border-box; 
                    padding: 8px;
                    // This removes the default blue outline
                    outline: none;
                    border: 1px solid #b0e0c2;
                    border-radius: 5px;
                }
                .field-style:focus {
                    box-shadow: 0 0 5px #b0e0c2;
                    border: 1px solid #b0e0c2;
                }
                .field-split {
                    width: 49%;
                }
                .field-full {
                    width: 100%;
                }
                textarea {
                    width: 100%;
                    height: 100px;
                }
                input.align-left {
                    float: left;
                }
                input.align-right {
                    float: right;
                }
                input[type="button"], 
                input[type="submit"] {
                    box-shadow: inset 0px 1px 0px 0px #39b143;
                    background-color: $green;
                    border: 1px solid #175e23;
                    border-radius: 2rem;
                    display: inline-block;
                    cursor: pointer;
                    color: $white;
                    padding: 8px 18px;
                    font: 12px $body;
                    font-weight: bold;
                }
                input[type="button"]:hover, 
                input[type="submit"]:hover {
                    background: linear-gradient(to bottom, #2da241 5%, #5bec8b 100%);
                    background-color: #289e4b;
                }
            }
        }
    }
}